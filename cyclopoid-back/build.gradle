buildscript {
    ext {
        springBootVersion = '2.1.2.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.1.0'
    }
}

plugins {
    id 'io.franzbecker.gradle-lombok' version '2.0'
    id 'java'
    id "org.sonarqube" version "2.7"
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'idea'

group = 'ua.cyclopoid'
version = '1.0.0'
archivesBaseName = 'cyclopoid-back'

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

idea {
    module {
        inheritOutputDirs = false
        outputDir = file("$buildDir/classes/main/")
    }
}

bootJar {
    manifest {
        attributes 'Start-Class': 'ua.cyclopoid.back.CyclopoidBackApplication'
    }
}

springBoot {
    mainClassName = "ua.cyclopoid.back.CyclopoidBackApplication"
}

sourceSets {
    main.java.srcDir "src/main/java"
    main.resources.srcDir "src/main/resources"
    test.java.srcDir "src/test/java"
    test.resources.srcDir "src/test/resources"
}

dependencies {
    annotationProcessor 'org.projectlombok:lombok:1.18.4'

    compileOnly 'org.projectlombok:lombok:1.18.4'

    implementation 'mysql:mysql-connector-java'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.data:spring-data-commons'
    implementation 'org.springframework.data:spring-data-jpa'
    implementation 'org.springframework.boot:spring-boot-autoconfigure'

    testCompileOnly 'org.junit.jupiter:junit-jupiter-api:5.3.2'
    testCompileOnly 'org.junit.jupiter:junit-jupiter-params:5.3.2'

    testImplementation 'io.rest-assured:rest-assured:3.3.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.3.2' 
    testImplementation 'org.hamcrest:hamcrest-core:1.3'
    testImplementation 'org.hamcrest:hamcrest-library:1.3'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

task evalDockerMachine(type: Exec) {
    commandLine 'eval', '\\"$(docker-machine env cyclopoid)\\"'
}

task dbRestore(type: Exec) {
    commandLine 'sh', 'db/restore.sh'
}

task dbBackUp(type: Exec) {
    commandLine 'sh', 'db/backup.sh'
}

task envStart(type: Exec) {
    commandLine 'docker-compose', '-f', 'docker/docker-compose-db.yml', 'up', '-d'
}

task envRemove(type: Exec) {
    commandLine 'docker-compose', '-f', 'docker/docker-compose-db.yml', 'down'
}

task envStop(type: Exec) {
    commandLine 'docker-compose', '-f', 'docker/docker-compose-db.yml', 'stop'
    finalizedBy envRemove
}

task imageBuild(type: Exec) {
    commandLine 'docker', 'build', '-t', 'dkanunik/cyclopoid-back:1.0.0', '.'
}

task imagePush(type: Exec) {
    dependsOn imageBuild
    commandLine 'docker', 'push', 'dkanunik/cyclopoid-back:1.0.0'
}

task image {
    dependsOn imagePush
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

task localStart(type: Exec) {
    dependsOn dbRestore
    finalizedBy bootRun
}

task backRemove(type: Exec) {
    commandLine 'docker-compose', '-f', 'docker/docker-compose-back.yml', 'down'
}

task backStop(type: Exec) {
    commandLine 'docker-compose', '-f', 'docker/docker-compose-back.yml', 'stop'
    finalizedBy backRemove
}

task backStart(type: Exec) {
    commandLine 'docker-compose', '-f', 'docker/docker-compose-back.yml', 'up', '-d'
    finalizedBy dbRestore
}

//junitPlatformTest.dependsOn(envStart)
//junitPlatformTest.finalizedBy containersRemove
